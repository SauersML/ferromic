# This file is autogenerated by maturin v1.8.2
# To update, run
#
#    maturin generate-ci github
#
name: CI

on:
  push:
    branches:
      - main
      - master
    tags:
      - '*'
  pull_request:
  workflow_dispatch:

permissions:
  contents: read

jobs:
  linux:
    runs-on: ${{ matrix.platform.runner }}
    strategy:
      matrix:
        platform:
          - runner: ubuntu-22.04
            target: x86_64
            openblas_target: SANDYBRIDGE
          - runner: ubuntu-22.04
            target: x86
            openblas_target: ATOM
          - runner: ubuntu-22.04
            target: aarch64
            openblas_target: ARMV8
          - runner: ubuntu-22.04
            target: armv7
            openblas_target: ARMV7
          - runner: ubuntu-22.04
            target: s390x
            openblas_target: ZARCH_GENERIC
          - runner: ubuntu-22.04
            target: ppc64le
            openblas_target: POWER9
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: 3.x
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        env:
          OPENSSL_STATIC: 1
          OPENSSL_VENDORED: 1
          OPENBLAS_TARGET: ${{ matrix.platform.openblas_target }}
        with:
          target: ${{ matrix.platform.target }}
          args: --release --out dist --find-interpreter
          sccache: ${{ !startsWith(github.ref, 'refs/tags/') }}
          manylinux: auto
          before-script-linux: |
            if command -v microdnf >/dev/null 2>&1; then
              microdnf install -y gcc gcc-c++ gcc-gfortran make perl wget
            elif command -v dnf >/dev/null 2>&1; then
              dnf install -y gcc gcc-c++ gcc-gfortran make perl wget
            elif command -v yum >/dev/null 2>&1; then
              yum install -y gcc gcc-c++ gcc-gfortran make perl wget
            elif command -v apt-get >/dev/null 2>&1; then
              apt-get update
              apt-get install -y build-essential gfortran perl wget
            elif command -v apk >/dev/null 2>&1; then
              apk add --no-cache build-base gfortran perl wget
            fi

      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-linux-${{ matrix.platform.target }}
          path: dist

  musllinux:
    runs-on: ${{ matrix.platform.runner }}
    strategy:
      matrix:
        platform:
          - runner: ubuntu-22.04
            target: x86_64
            openblas_target: SANDYBRIDGE
          - runner: ubuntu-22.04
            target: x86
            openblas_target: ATOM
          - runner: ubuntu-22.04
            target: aarch64
            openblas_target: ARMV8
          - runner: ubuntu-22.04
            target: armv7
            openblas_target: ARMV7
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: 3.x
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        env:
          OPENSSL_STATIC: 1
          OPENSSL_VENDORED: 1
          OPENBLAS_TARGET: ${{ matrix.platform.openblas_target }}
        with:
          target: ${{ matrix.platform.target }}
          args: --release --out dist --find-interpreter
          sccache: ${{ !startsWith(github.ref, 'refs/tags/') }}
          manylinux: musllinux_1_2
          before-script-linux: |
            if command -v microdnf >/dev/null 2>&1; then
              microdnf install -y gcc gcc-c++ gcc-gfortran make perl wget
            elif command -v dnf >/dev/null 2>&1; then
              dnf install -y gcc gcc-c++ gcc-gfortran make perl wget
            elif command -v yum >/dev/null 2>&1; then
              yum install -y gcc gcc-c++ gcc-gfortran make perl wget
            elif command -v apt-get >/dev/null 2>&1; then
              apt-get update
              apt-get install -y build-essential gfortran perl wget
            elif command -v apk >/dev/null 2>&1; then
              apk add --no-cache build-base gfortran perl wget
            fi
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-musllinux-${{ matrix.platform.target }}
          path: dist

  windows:
    runs-on: ${{ matrix.platform.runner }}
    strategy:
      matrix:
        platform:
          - runner: windows-latest
            target: x64
            vcpkg_triplet: x64-windows
          - runner: windows-latest
            target: x86
            vcpkg_triplet: x86-windows
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: 3.x
          architecture: ${{ matrix.platform.target }}
      - name: Install OpenBLAS dependencies
        shell: pwsh
        run: |
          $vcpkgRoot = Join-Path $Env:USERPROFILE "vcpkg"
          if (-Not (Test-Path $vcpkgRoot)) {
            git clone https://github.com/microsoft/vcpkg.git $vcpkgRoot
            & (Join-Path $vcpkgRoot "bootstrap-vcpkg.bat") -disableMetrics
          }
          & (Join-Path $vcpkgRoot "vcpkg.exe") install openblas --triplet ${{ matrix.platform.vcpkg_triplet }}
          "VCPKG_ROOT=$vcpkgRoot" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf8 -Append
          "VCPKG_DEFAULT_TRIPLET=${{ matrix.platform.vcpkg_triplet }}" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf8 -Append
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.platform.target }}
          args: --release --out dist --find-interpreter
          sccache: ${{ !startsWith(github.ref, 'refs/tags/') }}
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-windows-${{ matrix.platform.target }}
          path: dist

  macos:
    runs-on: ${{ matrix.platform.runner }}
    strategy:
      matrix:
        platform:
          - runner: macos-13
            target: x86_64
          - runner: macos-14
            target: aarch64
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: 3.x
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.platform.target }}
          args: --release --out dist --find-interpreter
          sccache: ${{ !startsWith(github.ref, 'refs/tags/') }}
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-macos-${{ matrix.platform.target }}
          path: dist

  release:
    name: Release
    runs-on: ubuntu-latest
    if: ${{ startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch' }}
    needs: [linux, musllinux, windows, macos]
    permissions:
      # Use to sign the release artifacts
      id-token: write
      # Used to upload release artifacts
      contents: write
      # Used to generate artifact attestation
      attestations: write
    steps:
      - uses: actions/download-artifact@v4
      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v1
        with:
          subject-path: 'wheels-*/*'
      - name: Publish to PyPI
        if: ${{ startsWith(github.ref, 'refs/tags/') }}
        uses: PyO3/maturin-action@v1
        env:
          MATURIN_PYPI_TOKEN: ${{ secrets.PYPI_API_TOKEN }}
        with:
          command: upload
          args: --non-interactive --skip-existing wheels-*/*
