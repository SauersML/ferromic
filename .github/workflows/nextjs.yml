name: Deploy Next.js site to Pages

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ["main"]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Build job
  build:
    runs-on: ubuntu-latest
    outputs:
      site-exists: ${{ steps.check-site.outputs.exists }}
    env:
      NEXT_APP_PATH: web/figures-site
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Check if Next.js site exists
        id: check-site
        run: |
          if [ -f "${{ env.NEXT_APP_PATH }}/package.json" ]; then
            echo "exists=true" >> $GITHUB_OUTPUT
            echo "Next.js site detected"
          else
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "No Next.js site detected"
          fi
      
      - name: Detect package manager
        if: steps.check-site.outputs.exists == 'true'
        id: detect-package-manager
        run: |
          APP_PATH="${{ env.NEXT_APP_PATH }}"
          if [ -f "$APP_PATH/yarn.lock" ]; then
            echo "manager=yarn" >> $GITHUB_OUTPUT
            echo "command=install" >> $GITHUB_OUTPUT
            echo "runner=yarn" >> $GITHUB_OUTPUT
            exit 0
          elif [ -f "$APP_PATH/package-lock.json" ]; then
            echo "manager=npm" >> $GITHUB_OUTPUT
            echo "command=ci" >> $GITHUB_OUTPUT
            echo "runner=npx --no-install" >> $GITHUB_OUTPUT
            exit 0
          elif [ -f "$APP_PATH/package.json" ]; then
            echo "manager=npm" >> $GITHUB_OUTPUT
            echo "command=install" >> $GITHUB_OUTPUT
            echo "runner=npx --no-install" >> $GITHUB_OUTPUT
            exit 0
          else
            echo "Unable to determine package manager"
            exit 1
          fi
      
      - name: Setup Node
        if: steps.check-site.outputs.exists == 'true'
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: ${{ steps.detect-package-manager.outputs.manager }}
          cache-dependency-path: ${{ env.NEXT_APP_PATH }}/${{ steps.detect-package-manager.outputs.manager == 'yarn' && 'yarn.lock' || 'package-lock.json' }}
      
      - name: Setup Pages
        if: steps.check-site.outputs.exists == 'true'
        uses: actions/configure-pages@v5
        with:
          static_site_generator: next
      
      - name: Restore cache
        if: steps.check-site.outputs.exists == 'true'
        uses: actions/cache@v4
        with:
          path: |
            ${{ env.NEXT_APP_PATH }}/.next/cache
          key: ${{ runner.os }}-nextjs-${{ hashFiles('web/figures-site/package-lock.json', 'web/figures-site/yarn.lock') }}-${{ hashFiles('web/figures-site/**/*.[jt]s', 'web/figures-site/**/*.[jt]sx') }}
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('web/figures-site/package-lock.json', 'web/figures-site/yarn.lock') }}-
      
      - name: Install dependencies
        if: steps.check-site.outputs.exists == 'true'
        working-directory: ${{ env.NEXT_APP_PATH }}
        run: ${{ steps.detect-package-manager.outputs.manager }} ${{ steps.detect-package-manager.outputs.command }}
      
      - name: Build with Next.js
        if: steps.check-site.outputs.exists == 'true'
        working-directory: ${{ env.NEXT_APP_PATH }}
        run: ${{ steps.detect-package-manager.outputs.runner }} next build
      
      - name: Upload artifact
        if: steps.check-site.outputs.exists == 'true'
        uses: actions/upload-pages-artifact@v3
        with:
          path: ${{ env.NEXT_APP_PATH }}/out

  # Deployment job
  deploy:
    if: needs.build.outputs.site-exists == 'true'
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
