name: run-analysis

on:
  workflow_dispatch:

jobs:
  run-figures:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install .[test]
          pip install seaborn matplotlib

      - name: Download analysis artefacts
        shell: bash
        run: |
          set -euo pipefail

          base='https://sharedspace.s3.msi.umn.edu'

          mapfile -t URLS <<'EOF'
          https://sharedspace.s3.msi.umn.edu/public_internet/variants_freeze4inv_sv_inv_hg38_processed_arbigent_filtered_manualDotplot_filtered_PAVgenAdded_withInvCategs_syncWithWH.fixedPH.simpleINV.mod.tsv
          https://sharedspace.s3.msi.umn.edu/public_internet/pairwise_glm_contrasts_fdr.tsv
          https://sharedspace.s3.msi.umn.edu/public_internet/pairwise_results_fdr.tsv
          https://sharedspace.s3.msi.umn.edu/public_internet/paml_results.checkpoint.tsv
          https://sharedspace.s3.msi.umn.edu/public_internet/perm_identical_pairs.tsv
          https://sharedspace.s3.msi.umn.edu/public_internet/perm_pairwise_identity.tsv
          https://sharedspace.s3.msi.umn.edu/public_internet/phy_metadata.tsv
          https://sharedspace.s3.msi.umn.edu/public_internet/region_identical_proportions.tsv
          https://sharedspace.s3.msi.umn.edu/public_internet/category_means_at_mean_covariates.tsv
          https://sharedspace.s3.msi.umn.edu/public_internet/category_summary.tsv
          https://sharedspace.s3.msi.umn.edu/public_internet/cds_emm.tsv
          https://sharedspace.s3.msi.umn.edu/public_internet/cds_emm_adjusted.tsv
          https://sharedspace.s3.msi.umn.edu/public_internet/cds_emm_nocov.tsv
          https://sharedspace.s3.msi.umn.edu/public_internet/cds_identical_proportions.tsv
          https://sharedspace.s3.msi.umn.edu/public_internet/cds_pairwise.tsv
          https://sharedspace.s3.msi.umn.edu/public_internet/cds_pairwise_adjusted.tsv
          https://sharedspace.s3.msi.umn.edu/public_internet/cds_pairwise_nocov.tsv
          https://sharedspace.s3.msi.umn.edu/public_internet/fixed_diff_summary.tsv
          https://sharedspace.s3.msi.umn.edu/public_internet/gene_direct_inverted.tsv
          https://sharedspace.s3.msi.umn.edu/public_internet/gene_inversion_direct_inverted.tsv
          https://sharedspace.s3.msi.umn.edu/public_internet/gene_inversion_fixed_differences.tsv
          https://sharedspace.s3.msi.umn.edu/public_internet/gene_inversion_permutation.tsv
          https://sharedspace.s3.msi.umn.edu/public_internet/glm_category_coefs.tsv
          https://sharedspace.s3.msi.umn.edu/public_internet/hudson_fst_results.tsv
          https://sharedspace.s3.msi.umn.edu/public_internet/inv_info.tsv
          https://sharedspace.s3.msi.umn.edu/public_internet/inversion_fst_estimates.tsv
          https://sharedspace.s3.msi.umn.edu/public_internet/inversion_level_counts.tsv
          https://sharedspace.s3.msi.umn.edu/public_internet/inversion_level_medians.tsv
          https://sharedspace.s3.msi.umn.edu/public_internet/kruskal_result.tsv
          https://sharedspace.s3.msi.umn.edu/public_internet/fst_tests_summary.csv
          https://sharedspace.s3.msi.umn.edu/public_internet/inversion_statistical_results.csv
          https://sharedspace.s3.msi.umn.edu/public_internet/inv_info.csv
          https://sharedspace.s3.msi.umn.edu/public_internet/output.csv
          https://sharedspace.s3.msi.umn.edu/public_internet/all_pairwise_results.csv
          https://sharedspace.s3.msi.umn.edu/public_internet/per_site_diversity_output.falsta
          https://sharedspace.s3.msi.umn.edu/public_internet/per_site_fst_output.falsta
          EOF

          mkdir -p analysis_downloads
          : > analysis_downloads/.downloaded_files

          for url in "${URLS[@]}"; do
            rel="${url#${base}/}"
            out="analysis_downloads/${rel}"
            mkdir -p "$(dirname "$out")"
            echo "Fetching $url"
            if ! curl -fSL --retry 3 "$url" -o "$out"; then
              echo "Warning: failed to fetch $url; continuing"
              rm -f "$out"
              continue
            fi
            echo "$out" >> analysis_downloads/.downloaded_files
          done

          while IFS= read -r f; do
            echo "===== HEAD: $f ====="
            head -n 10 "$f" || true
            echo
          done < analysis_downloads/.downloaded_files

      - name: Run replicate_figures.py
        run: python replicate_figures.py --skip-downloads

      - name: Post-run diagnostics
        if: always()
        shell: bash
        run: |
          set -euo pipefail
          echo '=== Repository root contents ==='
          ls -al
          echo '=== Generated figures (top level) ==='
          find . -maxdepth 1 -type f \( -name '*.png' -o -name '*.pdf' -o -name '*.svg' \) -print
          echo '=== Generated figures (within subdirectories) ==='
          find stats -maxdepth 3 -type f \( -name '*.png' -o -name '*.pdf' -o -name '*.svg' \) -print || true
          echo '=== Download directory structure ==='
          find analysis_downloads -maxdepth 2 -type f -print
          echo '=== Disk usage summary ==='
          du -h --max-depth=1

      - name: Collect generated outputs
        if: always()
        run: |
          python - <<'PY'
          import shutil
          from pathlib import Path

          root = Path('.')
          figures_dest = Path('artifacts/figures')
          figures_dest.mkdir(parents=True, exist_ok=True)
          skip_dirs = {'analysis_downloads', 'artifacts'}
          for pattern in ('*.png', '*.pdf', '*.svg', '*.txt', '*.tsv', '*.csv'):
              for path in root.rglob(pattern):
                  if path.is_file():
                      if any(part in skip_dirs for part in path.parts):
                          continue
                      rel = path.relative_to(root)
                      target = figures_dest / rel
                      target.parent.mkdir(parents=True, exist_ok=True)
                      shutil.copy2(path, target)

          downloads_src = Path('analysis_downloads')
          downloads_dest = Path('artifacts/downloads')
          if downloads_src.exists():
              if downloads_dest.exists():
                  shutil.rmtree(downloads_dest)
              shutil.copytree(downloads_src, downloads_dest)
          PY

      - name: Build figures website
        if: success()
        run: |
          python - <<'PY'
          import html
          import shutil
          from datetime import datetime, timezone
          from pathlib import Path

          repo_root = Path('.')
          figures_root = repo_root / 'artifacts' / 'figures'
          site_root = repo_root / 'site'
          site_figures_root = site_root / 'figures'

          if not figures_root.exists():
              raise SystemExit('No generated figures found in artifacts/figures')

          shutil.rmtree(site_root, ignore_errors=True)
          site_figures_root.mkdir(parents=True, exist_ok=True)

          allowed_exts = {'.png', '.svg', '.pdf'}
          files_by_dir = {}

          for path in sorted(figures_root.rglob('*')):
              if not path.is_file() or path.suffix.lower() not in allowed_exts:
                  continue
              rel = path.relative_to(figures_root)
              dest = site_figures_root / rel
              dest.parent.mkdir(parents=True, exist_ok=True)
              shutil.copy2(path, dest)
              files_by_dir.setdefault(str(rel.parent), []).append(rel)

          css = '''
          :root {
            color-scheme: light dark;
            font-family: system-ui, -apple-system, BlinkMacSystemFont, "Segoe UI", sans-serif;
            background: #f5f5f5;
            padding: 0;
            margin: 0;
          }
          body {
            margin: 0;
            padding: 0 1rem 4rem;
            background: inherit;
            color: #111;
          }
          header {
            padding: 2rem 0 1rem;
            text-align: center;
          }
          nav ul {
            list-style: none;
            padding: 0;
            display: flex;
            flex-wrap: wrap;
            justify-content: center;
            gap: 1rem;
          }
          nav a {
            text-decoration: none;
            color: #0055aa;
          }
          main {
            max-width: 1200px;
            margin: 0 auto;
          }
          section {
            margin-top: 3rem;
          }
          .figure-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
            gap: 2rem;
          }
          figure {
            background: white;
            border-radius: 8px;
            padding: 1rem;
            box-shadow: 0 2px 6px rgba(0, 0, 0, 0.1);
          }
          figure img {
            width: 100%;
            height: auto;
            display: block;
            border-radius: 4px;
            background: #fdfdfd;
          }
          figure object {
            width: 100%;
            height: 400px;
            border: none;
            border-radius: 4px;
            background: #fdfdfd;
          }
          figure figcaption {
            margin-bottom: 0.5rem;
            font-weight: 600;
          }
          .download {
            margin-top: 0.75rem;
          }
          footer {
            margin-top: 4rem;
            text-align: center;
            font-size: 0.9rem;
            color: #444;
          }
          '''

          generated_at = datetime.now(timezone.utc).strftime('%Y-%m-%d %H:%M UTC')

          if not files_by_dir:
              site_root.mkdir(parents=True, exist_ok=True)
              index_html = f'''<!DOCTYPE html>
          <html lang="en">
          <head>
            <meta charset="utf-8">
            <meta name="viewport" content="width=device-width, initial-scale=1">
            <title>Ferromic Analysis Figures</title>
            <style>{css}</style>
          </head>
          <body>
            <header>
              <h1>Ferromic Analysis Figures</h1>
              <p>No figure outputs were generated during this workflow run.</p>
            </header>
          </body>
          </html>
          '''
              (site_root / 'index.html').write_text(index_html, encoding='utf-8')
              raise SystemExit(0)

          nav_links = []
          sections = []
          for directory in sorted(files_by_dir):
              display_dir = directory if directory != '.' else 'Top-level figures'
              anchor = display_dir.replace('/', '-').replace(' ', '-').lower()
              nav_links.append(f'<li><a href="#{anchor}">{html.escape(display_dir)}</a></li>')

              figure_entries = []
              for rel in sorted(files_by_dir[directory]):
                  figure_path = 'figures/' + '/'.join(rel.parts)
                  name = rel.name
                  escaped_name = html.escape(name)
                  if rel.suffix.lower() == '.pdf':
                      preview = f'<object data="{figure_path}" type="application/pdf"></object>'
                  else:
                      preview = f'<img src="{figure_path}" alt="{escaped_name}">'
                  figure_entries.append(
                      f'<figure>\n'
                      f'  <figcaption>{escaped_name}</figcaption>\n'
                      f'  <a href="{figure_path}">{preview}</a>\n'
                      f'  <p class="download"><a href="{figure_path}">Download</a></p>\n'
                      f'</figure>'
                  )

              sections.append(
                  f'<section id="{anchor}">\n'
                  f'  <h2>{html.escape(display_dir)}</h2>\n'
                  f'  <div class="figure-grid">' + '\n'.join(figure_entries) + '\n  </div>\n'
                  f'</section>'
              )

          index_html = f'''<!DOCTYPE html>
          <html lang="en">
          <head>
            <meta charset="utf-8">
            <meta name="viewport" content="width=device-width, initial-scale=1">
            <title>Ferromic Analysis Figures</title>
            <style>{css}</style>
          </head>
          <body>
            <header>
              <h1>Ferromic Analysis Figures</h1>
              <p>Auto-generated from the Ferromic analysis workflows. Last updated {generated_at}.</p>
            </header>
            <nav>
              <ul>
                {''.join(nav_links)}
              </ul>
            </nav>
            <main>
              {''.join(sections)}
            </main>
            <footer>
              <p>Source: <a href="https://github.com/${{ github.repository }}">${{ github.repository }}</a></p>
            </footer>
          </body>
          </html>
          '''

          site_root.mkdir(parents=True, exist_ok=True)
          (site_root / 'index.html').write_text(index_html, encoding='utf-8')
          PY

      - name: Upload figure artefacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: figure-outputs
          path: artifacts/figures
          if-no-files-found: warn

      - name: Upload downloaded data artefacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: analysis-downloads
          path: artifacts/downloads
          if-no-files-found: warn

      - name: Upload GitHub Pages artifact
        if: success()
        uses: actions/upload-pages-artifact@v3
        with:
          path: site
          name: github-pages

  deploy-pages:
    needs: run-figures
    if: ${{ needs.run-figures.result == 'success' }}
    runs-on: ubuntu-latest
    permissions:
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
        with:
          artifact_name: github-pages
