name: Rust CI/CD

on:
  push:
    branches: [ "main" ]
    tags:
      - 'v*'
  pull_request:
    branches: [ "main" ]

env:
  CARGO_TERM_COLOR: always

jobs:
  build_and_test:
    name: Build and Test
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Build
      run: cargo build --verbose
    - name: Run tests
      run: cargo test --verbose

  cross_compile:
    name: Cross-compile
    needs: build_and_test
    if: startsWith(github.ref, 'refs/tags/v')
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
          - os: windows-latest
            target: x86_64-pc-windows-msvc
          - os: macos-latest
            target: x86_64-apple-darwin
          - os: macos-latest
            target: aarch64-apple-darwin
    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Install cross
      if: matrix.os == 'ubuntu-latest'
      run: cargo install cross

    - name: Build
      run: |
        if [ "${{ matrix.os }}" = "ubuntu-latest" ]; then
          cross build --release --target ${{ matrix.target }}
        else
          cargo build --release --target ${{ matrix.target }}
        fi
      shell: bash

    - name: Package
      id: package
      run: |
        binaries=$(cargo metadata --no-deps --format-version=1 | jq -r '.packages[0].targets[] | select(.kind[] | contains("bin")) | .name')
        for binary in $binaries; do
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            src="target/${{ matrix.target }}/release/${binary}.exe"
            dst="${binary}-${{ matrix.target }}.exe"
            cp "${src}" "${dst}"
            echo "::set-output name=asset_path::${dst}"
            echo "::set-output name=asset_name::${dst}"
            echo "::set-output name=content_type::application/vnd.microsoft.portable-executable"
          else
            src="target/${{ matrix.target }}/release/${binary}"
            dst="${binary}-${{ matrix.target }}.tar.gz"
            tar czvf "${dst}" -C "$(dirname "${src}")" "$(basename "${src}")"
            echo "::set-output name=asset_path::${dst}"
            echo "::set-output name=asset_name::${dst}"
            echo "::set-output name=content_type::application/gzip"
          fi
          
          echo "Uploading ${dst}"
          
          # Upload Release Asset
          curl -L \
            -X POST \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            -H "Content-Type: ${{ steps.package.outputs.content_type }}" \
            "https://uploads.github.com/repos/${{ github.repository }}/releases/${{ github.event.release.id }}/assets?name=${{ steps.package.outputs.asset_name }}" \
            --data-binary "@${{ steps.package.outputs.asset_path }}"
        done
      shell: bash
