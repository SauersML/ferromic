import fs from 'node:fs/promises';
import path from 'node:path';
import type { GetStaticProps } from 'next';
import Head from 'next/head';
import { FigureGallery, type FigureGroup } from '../components/FigureGallery';

interface FigureManifest {
  generatedAt: string | null;
  groups: FigureGroup[];
}

interface HomePageProps {
  manifest: FigureManifest;
  manifestError: string | null;
}

const MANIFEST_PATH = path.join(process.cwd(), 'data', 'figures.json');

export const getStaticProps: GetStaticProps<HomePageProps> = async () => {
  try {
    const raw = await fs.readFile(MANIFEST_PATH, 'utf-8');
    const manifest = JSON.parse(raw) as FigureManifest;
    return {
      props: {
        manifest,
        manifestError: null,
      },
    };
  } catch (error) {
    const message = error instanceof Error ? error.message : 'Unknown error';
    return {
      props: {
        manifest: { generatedAt: null, groups: [] },
        manifestError: `Unable to read manifest: ${message}`,
      },
    };
  }
};

export default function Home({ manifest, manifestError }: HomePageProps) {
  return (
    <>
      <Head>
        <meta
          name="description"
          content="Automatically generated visualisations from the Ferromic analysis pipeline."
        />
      </Head>
      {manifestError ? (
        <div style={{ maxWidth: '720px', margin: '4rem auto', padding: '0 1rem' }}>
          <h1>Ferromic Analysis Figures</h1>
          <p>
            Unable to load the latest manifest generated by the analysis workflow. The
            workflow may still be running, or there may have been an error writing the
            file.
          </p>
          <pre
            style={{
              background: 'rgba(220, 38, 38, 0.1)',
              borderRadius: '8px',
              padding: '1rem',
              overflowX: 'auto',
              color: '#991b1b',
            }}
          >
            {manifestError}
          </pre>
        </div>
      ) : (
        <FigureGallery groups={manifest.groups} generatedAt={manifest.generatedAt} />
      )}
    </>
  );
}
